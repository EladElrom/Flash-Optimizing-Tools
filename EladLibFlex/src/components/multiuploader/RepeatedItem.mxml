<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				creationComplete="creationCompleteHandler()">
	
	<!-- 
	Copyright (c) 2009 Elad Elrom.  Elrom LLC. All rights reserved. 
	
	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:
	
	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	
	@author  Elad Elrom
	-->
	
	<fx:Script>
		<![CDATA[
			import com.elad.framework.multiuploader.enum.FileTypeFormat;
			import mx.events.PropertyChangeEvent;
			import mx.binding.utils.ChangeWatcher;
			import com.elad.framework.multiuploader.FileUploaderManager;
			import com.elad.framework.multiuploader.LocalFileHelper;
			import com.elad.framework.multiuploader.vo.FileVO;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var fileUploaderManager:FileUploaderManager = FileUploaderManager.getInstance();			
			
			// fileCollection collection index
			private var index:int = 0;
			
			// on creation complete set the text fields and images
			protected function creationCompleteHandler():void
			{
				var file:FileVO = data as FileVO;
				
				fileNameText.text = file.fileName;
				
				// in case the file wasn't loaded yet
				if ( file.fileContent != null )
				{
					totalFileSizeText.text = LocalFileHelper.formatTotalBytes( file.fileContent.bytesAvailable );
					loadMedia(file);
				}
				else
				{
					ChangeWatcher.watch(file,["fileContent"], function(event:PropertyChangeEvent):void
					{
						totalFileSizeText.text = LocalFileHelper.formatTotalBytes( file.fileContent.bytesAvailable );
						loadMedia(file);						
					});
				}
				
				setEventListeners(file);
				setFileUploadedTextVisibleState( file );
				
				this.updateDisplayList( this.width, this.height );
			}
			
			// add event listeners to watch for changes
			private function setEventListeners(file:FileVO):void
			{
				index = fileUploaderManager.fileCollection.getIndexByFileName( file.fileName );
				var f:FileVO = fileUploaderManager.fileCollection.getItem( index );
				
				ChangeWatcher.watch(f,["isFileUploading"], onFileUploadingStatusChanged);	
				ChangeWatcher.watch(f,["byteLoaded"], onByteLoading);			
			}
			
			// method to recognize the different media types and display different icons
			private function loadMedia(file:FileVO):void
			{
				var loader:Loader = new Loader();
				
				if ( LocalFileHelper.isFileSupported( file.fileName, FileTypeFormat.FILE_FILTER_IMAGE_TYPE ) )
				{
					loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(event:Event):void
					{
						event.currentTarget.removeEventListener(event.type, arguments.callee);
						image.source = loader.content;
					});
					
					loader.loadBytes(file.fileContent);
				}
				else if ( LocalFileHelper.isFileSupported( file.fileName, FileTypeFormat.FILE_FILTER_VIDEO_TYPE ) )
				{
					image.source = "assets/multiuploader/images/VideoIcon.gif";
				}
				else if ( LocalFileHelper.isFileSupported( file.fileName, FileTypeFormat.FILE_FILTER_AUDIO_TYPE ) )
				{
					image.source = "assets/multiuploader/images/MusicIcon.png";
				}
			}
			
			// on byte loaded have the progress bar change
			private function onByteLoading( event:PropertyChangeEvent ):void
			{
				var file:FileVO = fileUploaderManager.fileCollection.getItem( index );
				
				if (progressBar.maximum == 0)
				{
					progressBar.visible = true;
					progressBar.maximum = file.byteTotal;
				}
				
				progressBar.setProgress( file.byteLoaded, file.byteTotal );
			}
			
			// once file is uploaded remove the uploader
			private function onFileUploadingStatusChanged( event:PropertyChangeEvent ):void
			{
				var file:FileVO = fileUploaderManager.fileCollection.getItem( index );
				setFileUploadedTextVisibleState( file, true );
			}
			
			private function setFileUploadedTextVisibleState( file:FileVO, applyAnimation:Boolean = false ):void
			{
				if ( !applyAnimation )
				{
					fadeIn.duration = 0;
					fadeOut.duration = 0;
					fadeInLong.duration = 0;
				}
				else
				{
					fadeIn.duration = 2500;
					fadeOut.duration = 1000;
					fadeInLong.duration = 4000;					
				}
				
				if ( file.isFileUploading == true && progressBar.visible != true )
				{
					progressBar.visible = true;
				}
				else
				{
					if ( file.byteLoaded > 0)
					{
						fadeInLong.duration = 4000;
						progressBar.visible = false;
						progressBar.setProgress( 100, 100 );
						fileUploadedMessage.visible = true;
					}
				}
			}

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>			
		<s:State name="hovered"/>
		<s:State name="selected"/>
	</s:states>
	
	<fx:Declarations>
		<mx:Fade id="fadeOut" alphaFrom="1.0" alphaTo="0.0"/>
		<mx:Fade id="fadeIn" alphaFrom="0.0" alphaTo="1.0"/>
		<mx:Fade id="fadeInLong" alphaFrom="0.0" alphaTo="1.0"/>
	</fx:Declarations>

	<s:Rect width="224" height="35" y="0" x="0" 
			id="rect1">
		
		<s:fill>
			<s:SolidColor color.normal="0xFFFFFF" 
						  color.hovered="0xCEDBEF" 
						  color.selected="0xA8C6EE"/>
		</s:fill>
	</s:Rect>
	
	<mx:ProgressBar id="progressBar" visible="false" 
					hideEffect="{fadeOut}" showEffect="{fadeIn}"
					x="130" y="2" width="80" mode="manual" />
	
	<s:RichText id="fileNameText"
				x="58" y="4"
				height="12" width="50" 
				color="0x4769C4"  />
	
	<s:RichText id="totalFileSizeText"
				x="58" y="16"
				height="12" width="156" 
				color="0x4769C4" />
	
	<mx:Label id="fileUploadedMessage" text="File Uploaded" 
				showEffect="{fadeInLong}"
				x="120" y="8"
				visible="false"/>	
	
	<mx:Image id="image" y="5.5" x="7.5" 
			  height="23" width="39" />
	
	<s:Button id="axisButton" x="205" y="8" alpha="0"
			  buttonMode="true" 
			  skinClass="components.multiuploader.AxisButton"/>

	<s:transitions>
		<s:Transition fromState="normal" toState="selected">
			<s:Parallel>
				<s:Parallel target="{axisButton}">
					<s:Fade duration="300" alphaFrom="0" alphaTo="1"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="selected" toState="normal">
			<s:Parallel>
				<s:Parallel target="{axisButton}">
					<s:Fade duration="0" alphaFrom="1" alphaTo="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>		
	</s:transitions>	
	
</s:ItemRenderer>