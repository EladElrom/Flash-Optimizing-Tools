<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   minWidth="955" minHeight="600"
			   creationComplete="creationCompleteHandler()">
	<fx:Script>
		<![CDATA[
			import com.elad.optimize.cache.BitmapCaching;
			import com.elad.optimize.cache.GarbageCollector;
			import com.elad.optimize.memory.MemoryInfo;
			
			import flash.filters.DropShadowFilter;
			
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			
			private static const NUM_OF_DISPLAY_OBJECTS:int = 500; 
			
			protected function creationCompleteHandler():void
			{
				var statsSprite:Stats = new Stats();
				var componenent:UIComponent = new UIComponent();
				
				componenent.addChild( statsSprite );
				stats.addElement( componenent );
			}			
			
			private function bitmapCache():void
			{
				var destination:Sprite = new Sprite();
				var uicom:UIComponent = new UIComponent();
				uicom.addChild(destination);
				group.addElement( uicom );

				var movieClip:MovieClip;
				for (var i:int = 0; i < NUM_OF_DISPLAY_OBJECTS; i++ )
				{
					movieClip = BitmapCaching.createMovieClipBasedOnSprite( spriteSource, true, setClipEventHandlers);
					destination.addChild( movieClip ); 
				}
			}
			
			protected function manualCache():void
			{
				var source:Sprite = spriteSource;
				var destination:Sprite = new Sprite();
				
				var uicom:UIComponent = new UIComponent();
				uicom.addChild(destination);
				group.addElement( uicom );
				
				var bitmap:Bitmap;
				var bitmapData:BitmapData = BitmapCaching.manualCacheAsBitmapData( source, FlexGlobals.topLevelApplication );
				
				for (var i:int = 0; i < NUM_OF_DISPLAY_OBJECTS; i++) 
				{
					bitmap = BitmapCaching.createBitmapClip( bitmapData, setClipEventHandlers );
					destination.addChild( bitmap ); 
				}	
			}
			
			private function get spriteSource():Sprite
			{
				var source:Sprite = new Sprite();
				source.graphics.beginFill(0xFF88CC);
				source.graphics.drawRect(0, 0, 80, 80);
				
				source.filters = [new DropShadowFilter()];	
				
				return source;
			}
			
			private function setClipEventHandlers(clip:*):void
			{
				var newX:int;
				var newY:int;	
				
				clip.addEventListener( Event.ADDED_TO_STAGE, function( event:Event ):void {
					
					newX = Math.random() * ( stage.stageWidth - ( clip.width / 2 ) );
					newY = Math.random() * ( stage.stageHeight - (clip.height / 2 ) );
					
					clip.addEventListener( Event.ENTER_FRAME, function( event:Event ):void {
						
						clip.x -= ( clip.x - newX ) * 0.25;
						clip.y -= ( clip.y - newY ) * 0.25;
						clip.alpha = Math.random();
						
					});
				});	
			}

		]]>
	</fx:Script>
	
	<s:Group id="group" />
	
	<s:Group id="stats" />
	
	<s:Button label="Bitmap Cache" click="GarbageCollector.forceGarbageCollector( FlexGlobals.topLevelApplication ); 
			  checkBox.visible=true; group.removeAllElements(); 
			  bitmapCache()" 
			  x="283" y="4"/>
	
	<s:Button label="Manual Cache" click="GarbageCollector.forceGarbageCollector( FlexGlobals.topLevelApplication ); 
			  checkBox.visible=false; group.removeAllElements(); 
			  manualCache()" 
			  x="387" y="4"/>
	
	<s:CheckBox id="checkBox" x="170" y="6" label="bitmap cache all" 
				click="GarbageCollector.forceGarbageCollector( FlexGlobals.topLevelApplication ); 
				BitmapCaching.setAllChildrenCachingPolicy( group.getElementAt(0), checkBox.selected, false, true );" 
				visible="false" selected="true"/>

</s:Application>
